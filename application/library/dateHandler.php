<?php
/*
 | 日期加工（如 农历、公历转换）
 +----------------------------
 */
class dateHandler
{
	var $tianGan = array('甲','乙','丙','丁','戊','己','庚','辛','壬','癸');	//天干
	var $dizhi   = array('子','丑','寅','卯','辰','巳','午','未','申','酉','戌','亥');	//地支
	var $animals = array('鼠','牛','虎','兔','龙','蛇','马','羊','猴','鸡','狗','猪');//十二生肖与十二地支配对，生肖“鼠”对应地支“子”，以此类推
	
	/*
	 | 返回星期几
	 +-------------------------
	 | $para currDate 公历时间
	 */
	function getDayOfWeek(DateTime $currDate)
	{
		switch($currDate->format('N'))
		{
			case 1:
				$rs = '星期一'; break;
			case 2:
				$rs = '星期二'; break;
			case 3:
				$rs = '星期三'; break;
			case 4:
				$rs = '星期四'; break;
			case 5:
				$rs = '星期五'; break;
			case 6:
				$rs = '星期六'; break;
			case 7:
				$rs = '星期日'; break;
			default: $rs = ''; break;
		}
		
		return $rs;
	}
	
	/*
	 | 农历转公历
	 +------------------------
	 | @para year		农历年
	 | @para month		农历月
	 | @para date		农历日
	 | @para isleap		当前月是否闰月
	 */
	function lunar2solar($year, $month, $day, $isleap=false)
	{
		$tool = new Lunar();
		$rs = $tool->convertLunarToSolar($year, $month, $day, $isleap);
		return $rs;
	}
	
	/*
	 | 公历转农历
	 +------------------------
	 | @para year 	公历年
	 | @para month 	公历月
	 | @para day 	公历日
	 */
	function solar2lunar($year, $month, $day)
	{
		$tool = new Lunar();
		$rs = $tool->convertSolarToLunar($year, $month, $day);
		$rs['year'] = $rs['0'];
		$rs['month'] = $rs['1'];
		$rs['day'] = $rs['2'];
		
		if($rs[7] == 0)
		{
			$rs['isleap'] = 0;
		}
		else
		{
			if('闰'.$rs[7] != $rs[1])
			{
				$rs['isleap'] = 0;
			}
			else
			{
				$rs['isleap'] = 1;
				$rs['month'] = $rs[7];
			}
		}
		unset($rs[0],$rs[1],$rs[2],$rs[3],$rs[4],$rs[5],$rs[6],$rs[7]);
		return $rs;
	}
	
	/*
	 | 返回十二生肖的名称
	 +-------------------------
	 | @para year	农历年
	 */
	function getAnimals($year)
	{
		$rs = $this->animals[($year - 1864) % 12];	//农历1864年是鼠年
		
		return $rs;
	}
	
	/*
	 | 返回农历年份的干支名称，即年柱
	 | 以每年的节气”立春“为界限
	 +--------------------------
	 | @para currDate	公历时间
	 */
	function getYearName(DateTime $currDate)
	{
		$currYear = $currDate->format('Y');	//年
		
		$jieqiInMonth = $this->getSolarTerms(($currYear - 1900) * 12 + 2 - 1);
		$firstJieqiDay = $jieqiInMonth[0];	//存储在节气列表中指定年份和月份的第一个节气数据，即“节气”
		
		$currLichunDate = new DateTime($currYear.'-2-'.$firstJieqiDay);
		$interval = $currLichunDate->diff($currDate);
		$flag = $interval->format('%R%a');
		
		if($flag[0] == '-')
		{//如果指定公历日期小于当年的立春的公历日期，则对应的农历年份名称是上一年的农历年份名称
			$rs = $this->tianGan[($currYear - 1 - 1864) % 10].$this->dizhi[($currYear - 1 - 1864) % 12];
		}
		else
		{//农历1864年是甲子年
			$rs = $this->tianGan[($currYear - 1864) % 10].$this->dizhi[($currYear - 1864) % 12];
		}
		
		return $rs;
	}
	
	/*
	 | 返回农历月份的干支名称，即月柱；
	 | 以每月的第一个节气为界限
	 +----------------------------
	 | @para currDate	公历时间
	 */
	function getMonthName(DateTime $currDate)
	{
		$currYear  = $currDate->format('Y');	//年
		$currMonth = $currDate->format('n');	//月
		
		$jieqiInMonth = $this->getSolarTerms(($currYear - 1900) * 12 + $currMonth - 1);
		$firstJieqiDay = $jieqiInMonth[0];	//存储在节气列表中指定年份和月份的第一个节气数据，即“节气”
		$yearName = $this->getYearName($currDate);
		$index = array_search($yearName[0], $this->tianGan);
		
		$currJieqiDate = new DateTime($currYear.'-'.$currMonth.'-'.$firstJieqiDay);	//当前日期所在月份的第一个节气的日期
		$interval = $currLichunDate->diff($currDate);
		$flag = $interval->format('%R%a');
		
		if($flag[0] == '-')
		{
			$index = $index * 12 + (12 + $currMonth % 12 - 3) % 12;
		}
		else
		{
			$index = $index * 12 + (12 + $currMonth % 12 - 2) % 12;
		}
		
		$rs = $this->tianGan[($index + 2) % 10] + $this->dizhi[($index + 2) % 12];
		return $rs;
	}
	
	/*
	 | 返回农历日份的干支名称，即日柱 
	 +-----------------------------
	 | @para	currDate 公历时间
	*/
	function getDayName(DateTime $currDate)
	{
		$startDate = new DateTime('1900-1-1');
		$interval = $startDate->diff($currDate);
		$rs = $this->tianGan[($interval->days + 11 - 1) % 10].$this->dizhi[($interval->days + 11 - 1) % 12];
		
		return $rs;
	}
	
	/*
	 | 返回农历月份的名称
	 +-----------------------------
	 | @para	currDate 公历时间 
	 */
	function getMonthCN(DateTime $currDate)
	{
		$monthCN = array('正', '二', '三', '四', '五', '六', '七', '八', '九', '十', '十一', '十二');
		$monthCN = array('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12');
		$month = $this->getMonth($currDate);			//当前公历时间对应的农历月份
		$leapMonth = $this->getLeapMonth($currDate);	//当前公历时间对应的农历年的闰月
		
		if($leapMonth != 0)
		{//当前农历年有闰月
			if($month == $leapMonth)
			{
				$rs = '闰'.$monthCN[$month - 2];
			}
			else if($month < $leapMonth)
			{
				$rs = $monthCN[$month - 1];
			}
			else
			{
				$rs = $monthCN[$month - 2];
			}
		}
		else
		{
			$rs = $monthCN[$month - 1];
		}
		
		return $rs;
	}
	
	/*
	 | 返回农历日的名称
	 +------------------------------
	 | @para	currDate 公历时间
	 */
	function getDayCN(DateTime $currDate)
	{
		$dayCN = array(
			'初一', '初二', '初三', '初四', '初五', '初六', '初七', '初八', '初九', '初十',
			'十一', '十二', '十三', '十四', '十五', '十六', '十七', '十八', '十九', '二十',
			'廿一', '廿二', '廿三', '廿四', '廿五', '廿六', '廿七', '廿八', '廿九', '三十');
		$rs = $dayCN[$this->getDayOfMonth($currDate) - 1];
		return $rs;
	}
	
	/*
	 | 返回节气名称
	 +------------------------------
	 | @para	currDate 公历时间
	 | 日期时间戳至少需包含年、月、日信息
	 */
	function getSolarTermsName(DateTime $currDate)
	{
		//二十四节气
		$solarTerms = array('小寒', '大寒', '立春', '雨水', '惊蛰', '春分',
							'清明', '谷雨', '立夏', '小满', '芒种', '夏至',
							'小暑', '大暑', '立秋', '处暑', '白露', '秋分',
							'寒露', '霜降', '立冬', '小雪', '大雪', '冬至');//每月第一个节气为“节气”,第二个节气为“中气”
		
		$currYear  = $currDate->format('Y');	//年
		$currMonth = $currDate->format('n');	//月
		$currDay   = $currDate->format('j');	//日
		$rs        = '';
		
		$jieqiInMonth = $this->getSolarTerms(($currYear - 1900) * 12 + $currMonth - 1);	//存储在节气列表中指定年份和月份的节气数据
		$firstJieqiDay = $jieqiInMonth[0];	//存储在节气列表中指定年份和月份的第一个节气数据，即“节气”
		$secondJieqiDay = $jieqiInMonth[1];	//存储在节气列表中指定年份和月份的第二个节气数据，即“中气”
		
		//判断指定日期是否为二十四节气，如果是则返回节气的名称
		if($currDay == $firstJieqiDay)//指定日所在月份的第一个节气
		{
			$rs = $solarTerms[($currMonth - 1) * 2];
		}
		else if($currDay == 15 + $secondJieqiDay)//指定日所在月份的第二个节气
		{
			$rs = $solarTerms[($currMonth - 1) * 2 + 1];
		}
		
		return $rs;
	}
	
	/*
	 | 返回指定公历日期所对应的农历日份
	 +-------------------------------
	 | @para	currDate	公历时间
	 */
	function getDayOfMonth(DateTime $currDate)
	{
		$currYear = $currDate->format('Y');	//年
		$cnYear = $this->getYearData($currYear - 1900);
		
		$zhengyueDate = new DateTime($currYear.'-'.$cnYear[0].'-'.$cnYear[1].$cnYear[2]);	//当前年份的正月日期
		$interval = $zhengyueDate->diff($currDate);
		$flag = $interval->format('%R%a');
		
		if($flag[0] == '-')
		{
			$cnYear = $this->getYearData($currYear - 1900 - 1);
			$zhengyueDate = new DateTime(($currYear - 1).'-'.$cnYear[0].'-'.$cnYear[1].$cnYear[2]);	//当前年份的正月日期
			$interval = $zhengyueDate->diff($currDate);
		}
		$dayCnt1 = $interval->days;	//指定公历日期与所在农历年的正月初一的公历日期相差的天数
		$dayCnt2 = 0;
		$bin = decbin(hexdec($cnYear[4].$cnYear[5].$cnYear[6].$cnYear[7]));
		$cnt = strlen($bin);
		for($i = 1; $i < $cnt; $i++)
		{
			switch($bin[$i])
			{
				case 0:
					$daysInMonth = 29;
					$dayCnt2 += 29;
					break;
				case 1:
					$daysInMonth = 30;
					$dayCnt2 += 30;
					break;
			}
			
			if($dayCnt1 <= $dayCnt2)
			{
				break;
			}
		}
		
		return $daysInMonth - ($dayCnt2 - $dayCnt1);
	}
	
	/*
	 | 返回指定公历日期所对应的农历月份
	 +--------------------------------
	 | @para	currDate	公历时间
	 */
	function getMonth(DateTime $currDate)
	{
		$currYear = $currDate->format('Y');	//年
		$cnYear = $this->getYearData($currYear - 1900);
		
		$zhengyueDate = new DateTime($currYear.'-'.$cnYear[0].'-'.$cnYear[1].$cnYear[2]);	//当前年份的正月日期
		$interval = $zhengyueDate->diff($currDate);
		$flag = $interval->format('%R%a');
		
		if($flag[0] == '-')
		{//指定公历日期所在的农历年是上一年
			$cnYear = $this->getYearData($currYear - 1900 - 1);
			$zhengyueDate = new DateTime(($currYear - 1).'-'.$cnYear[0].'-'.$cnYear[1].$cnYear[2]);	//当前年份的正月日期
			$interval = $zhengyueDate->diff($currDate);
		}
		$dayCnt1 = $interval->days;	//指定公历日期与所在农历年的正月初一的公历日期相差的天数
		$dayCnt2 = $Month = 0;
		$bin = decbin(hexdec($cnYear[4].$cnYear[5].$cnYear[6].$cnYear[7]));
		$cnt = strlen($bin);
		for($i = 1; $i < $cnt; $i++)
		{
			switch($bin[$i])
			{
				case 0:
					$dayCnt2 += 29; break;
				case 1:
					$dayCnt2 += 30; break;
			}
			
			if($dayCnt1 <= $dayCnt2)
			{
				$Month = $i; break;
			}
		}
		
		return $Month;
	}
	
	/*
	 | 返回指定公历日期所对应的农历年的闰月
	 +---------------------------------
	 | @para	currDate	公历时间
	 */
	function getLeapMonth(DateTime $currDate)
	{
		$currYear = $currDate->format('Y');	//年
		$cnYear = $this->getYearData($currYear - 1900);
		
		$zhengyueDate = new DateTime($currYear.'-'.$cnYear[0].'-'.$cnYear[1].$cnYear[2]);	//当前年份的正月日期
		$interval = $zhengyueDate->diff($currDate);
		$flag = $interval->format('%R%a');
		
		if($flag[0] == '-')
		{
			$cnYear = $this->getYearData($currYear - 1900 - 1);
		}
		
		$rs = hexdec($cnYear[3]);
		
		return $rs;
	}
	 
	/*
	 | 返回指定公历日期所对应的农历年份
	 +----------------------------------
	 | @para	currDate	公历时间
	 */
	function getYear(DateTime $currDate)
	{
		$currYear = $currDate->format('Y');	//年
		$cnYear = $this->getYearData($currYear - 1900);
		$zhengyueDate = new DateTime($currYear.'-'.$cnYear[0].'-'.$cnYear[1].$cnYear[2]);	//当前年份的正月日期
		
		$interval = $zhengyueDate->diff($currDate);
		$flag = $interval->format('%R%a');
		
		if ($flag[0] == '-')
		{
			$currYear--;
		}
		
		return $currYear;
	}
	
	/*
	 | 返回每个农历年的正月初一的公历日期，每个农历年的闰月，每个农历年的大小月分配
	 +——--------------------------------------------------------------
	 | 农历数据记录从1900年到2100年每年的正月初一的公历日期、闰月和大小月分配
	 | 数据说明：例如1900年的数据“0x1319296D”，第一位1是正月的公历月份，第二
	 | 位和第三位的组合31是正月的公历日期，第四位9是闰月的所在月（即闰八月，如果
	 | 是0则表示没有闰月），最后四位296D表示指定农历年的大小月排列（十六进制转
	 | 二进制，转成二进制后，第一个数字1作为分隔符，在后面的数字中，0表示小月，1表
	 | 示大月）
	 +---------------------------------------------------------------
     | @para	index	索引
	*/
	function getYearData(int $index)
	{
		//例如1901年的数据0x192014AE，第一位是正月的公历月份，第二位和第三位的组合是正月的公历日期，
		//第四位0是闰月的所在月，最后四位表示指定农历年的大小月排列（十六进制转二进制，0表示小月，1表示大月）
		$cnYear =array(
			0x1319296D, 0x219014AE, 0x20801A57, 0x12962A4D, 0x21601D26, 0x20401D95, 0x12552D55, 0x2130156A, 0x202019AD, 0x1223295D, //1900-1909
			0x210014AE, 0x1307349B, 0x21801A4D, 0x20601D25, 0x12663AA5, 0x21401B54, 0x20301D6A, 0x123332DA, 0x2110195B, 0x20182937, //1910-1919
			0x22001497, 0x20801A4B, 0x1286364B, 0x216016A5, 0x205016D4, 0x124535B5, 0x213012B6, 0x20201957, 0x1233292F, 0x21001497, //1920-1929
			0x13072C96, 0x21701D4A, 0x20601EA5, 0x12662DA9, 0x214015AD, 0x204012B6, 0x1244326E, 0x2110192E, 0x1318392D, 0x21901C95, //1930-1939
			0x20801D4A, 0x12773B4A, 0x21501B55, 0x2050156A, 0x1255355B, 0x2130125D, 0x2020192D, 0x1223392B, 0x21001A95, 0x12983695, //1940-1949
			0x217016CA, 0x20601B55, 0x12762AB5, 0x214014DA, 0x20301A5B, 0x12442A57, 0x2120152B, 0x1319352A, 0x21801E95, 0x208016AA, //1950-1959
			0x128735AA, 0x21501AB5, 0x205014B6, 0x125534AE, 0x21301A57, 0x20201526, 0x12143D26, 0x20901D95, 0x13082B55, 0x2170156A, //1960-1969
			0x2060196D, 0x1276295D, 0x215014AD, 0x20301A4D, 0x12353A4D, 0x21101D25, 0x13193AA5, 0x21801B54, 0x20701B6A, 0x128732DA, //1970-1979
			0x2160195B, 0x2050149B, 0x12553497, 0x21301A4B, 0x202B364B, 0x220016A5, 0x209016D4, 0x129735B4, 0x21701AB6, 0x20601957, //1980-1989
			0x1276292F, 0x21501497, 0x2040164B, 0x12342D4A, 0x21001EA5, 0x13192D65, 0x219015AC, 0x20701AB6, 0x1286326D, 0x2160192E, //1990-1999
			0x20501C96, 0x12453A95, 0x21201D4A, 0x20101DA5, 0x12232B55, 0x2090156A, 0x1298355B, 0x2180125D, 0x2070192D, 0x1266392B, //2000-2009
			0x21401A95, 0x20301B4A, 0x123536AA, 0x21001AD5, 0x131A2AB5, 0x219014BA, 0x20801A5B, 0x12872A57, 0x2160152B, 0x20501A93, //2010-2019
			0x12552E95, 0x212016AA, 0x20101AD5, 0x122329B5, 0x210014B6, 0x129734AE, 0x21701A4E, 0x20601D26, 0x12663D26, 0x21301D53, //2020-2029
			0x203015AA, 0x12342D6A, 0x2110196D, 0x131C295D, 0x219014AD, 0x20801A4D, 0x12873A4B, 0x21501D25, 0x20401D52, 0x12463B54, //2030-2039
			0x21201B5A, 0x2010156D, 0x1223295B, 0x2100149B, 0x13083497, 0x21701A4B, 0x20601AA5, 0x126636A5, 0x214016D2, 0x20201ADA, //2040-2049
			0x12342AB6, 0x21101937, 0x2019292F, 0x21901497, 0x2080164B, 0x12872D4A, 0x21501EA5, 0x204016B2, 0x1245356C, 0x21201AAE, //2050-2059
			0x2020192E, 0x1214392E, 0x20901C96, 0x12983A95, 0x21701D4A, 0x20501DA5, 0x12662B55, 0x2140156A, 0x20301A6D, 0x12352A5D, //2060-2069
			0x2110152D, 0x1319352B, 0x21901A95, 0x20701B4A, 0x127736AA, 0x21501AD5, 0x2050155A, 0x124534BA, 0x21201A5B, 0x2020152B, //2070-2079
			0x12243527, 0x20901693, 0x12982E53, 0x217016AA, 0x20601AD5, 0x126629B5, 0x214014B6, 0x20301A57, 0x12452A4E, 0x21001D26, //2080-2089
			0x13093D26, 0x21801D52, 0x20701DAA, 0x12772D6A, 0x2150156D, 0x205014AE, 0x1255349D, 0x21201A4D, 0x20101D15, 0x12133B25, //2090-2099
			0x20901D52//2100
		);
		return dechex($cnYear[$index]);
	}
	
	/*
	 | 返回节气数据，从1900年到2100年
	 +--------------------------------
	 */
	function getSolarTerms(int $index)
	{
		//节气数据表
		$SolarTerms =array(
			0x65, 0x43, 0x55, 0x45, 0x56, 0x56, 0x78, 0x78, 0x78, 0x88, 0x77, 0x77, //1900
			0x66, 0x44, 0x66, 0x56, 0x67, 0x67, 0x88, 0x89, 0x89, 0x99, 0x88, 0x87, //1901
			0x66, 0x54, 0x66, 0x66, 0x67, 0x77, 0x89, 0x89, 0x89, 0x99, 0x88, 0x88, //1902
			0x66, 0x55, 0x77, 0x66, 0x77, 0x77, 0x89, 0x99, 0x99, 0x99, 0x88, 0x88, //1903
			0x76, 0x55, 0x66, 0x55, 0x66, 0x67, 0x78, 0x88, 0x88, 0x99, 0x88, 0x77, //1904
			0x66, 0x44, 0x66, 0x56, 0x67, 0x67, 0x88, 0x89, 0x89, 0x99, 0x88, 0x87, //1905
			0x66, 0x54, 0x66, 0x66, 0x67, 0x67, 0x89, 0x89, 0x89, 0x99, 0x88, 0x88, //1906
			0x66, 0x55, 0x77, 0x66, 0x77, 0x77, 0x89, 0x99, 0x99, 0x99, 0x88, 0x88, //1907
			0x76, 0x55, 0x66, 0x55, 0x66, 0x67, 0x78, 0x88, 0x88, 0x99, 0x88, 0x77, //1908
			0x66, 0x44, 0x66, 0x56, 0x67, 0x67, 0x88, 0x89, 0x89, 0x99, 0x88, 0x87, //1909
			0x66, 0x54, 0x66, 0x66, 0x67, 0x67, 0x89, 0x89, 0x89, 0x99, 0x88, 0x88, //1910
			0x66, 0x55, 0x77, 0x66, 0x77, 0x77, 0x89, 0x99, 0x99, 0x99, 0x88, 0x88, //1911
			0x76, 0x55, 0x66, 0x55, 0x66, 0x67, 0x78, 0x88, 0x88, 0x99, 0x88, 0x77, //1912
			0x65, 0x44, 0x66, 0x56, 0x67, 0x67, 0x88, 0x89, 0x89, 0x99, 0x88, 0x87, //1913
			0x66, 0x44, 0x66, 0x56, 0x67, 0x67, 0x89, 0x89, 0x89, 0x99, 0x88, 0x88, //1914
			0x66, 0x55, 0x67, 0x66, 0x67, 0x77, 0x89, 0x89, 0x99, 0x99, 0x88, 0x88, //1915
			0x66, 0x55, 0x66, 0x55, 0x66, 0x67, 0x78, 0x88, 0x88, 0x89, 0x87, 0x77, //1916
			0x65, 0x44, 0x66, 0x56, 0x66, 0x67, 0x88, 0x89, 0x88, 0x99, 0x88, 0x77, //1917
			0x66, 0x44, 0x66, 0x56, 0x67, 0x67, 0x89, 0x89, 0x89, 0x99, 0x88, 0x87, //1918
			0x66, 0x55, 0x67, 0x66, 0x67, 0x77, 0x89, 0x89, 0x99, 0x99, 0x88, 0x88, //1919
			0x66, 0x55, 0x66, 0x55, 0x66, 0x67, 0x78, 0x88, 0x88, 0x89, 0x87, 0x77, //1920
			0x65, 0x44, 0x66, 0x55, 0x66, 0x67, 0x88, 0x89, 0x88, 0x99, 0x88, 0x77, //1921
			0x66, 0x44, 0x66, 0x56, 0x67, 0x67, 0x89, 0x89, 0x89, 0x99, 0x88, 0x87, //1922
			0x66, 0x54, 0x66, 0x66, 0x67, 0x77, 0x89, 0x89, 0x99, 0x99, 0x88, 0x88, //1923
			0x66, 0x55, 0x66, 0x55, 0x66, 0x67, 0x78, 0x88, 0x88, 0x89, 0x87, 0x77, //1924
			0x65, 0x44, 0x66, 0x55, 0x66, 0x67, 0x88, 0x89, 0x88, 0x99, 0x88, 0x77, //1925
			0x66, 0x44, 0x66, 0x56, 0x67, 0x67, 0x88, 0x89, 0x89, 0x99, 0x88, 0x87, //1926
			0x66, 0x54, 0x66, 0x66, 0x67, 0x77, 0x89, 0x89, 0x89, 0x99, 0x88, 0x88, //1927
			0x66, 0x55, 0x66, 0x55, 0x66, 0x66, 0x78, 0x88, 0x88, 0x88, 0x77, 0x77, //1928
			0x65, 0x44, 0x66, 0x55, 0x66, 0x67, 0x78, 0x88, 0x88, 0x99, 0x88, 0x77, //1929
			0x66, 0x44, 0x66, 0x56, 0x67, 0x67, 0x88, 0x89, 0x89, 0x99, 0x88, 0x87, //1930
			0x66, 0x54, 0x66, 0x66, 0x67, 0x77, 0x89, 0x89, 0x89, 0x99, 0x88, 0x88, //1931
			0x66, 0x55, 0x66, 0x55, 0x66, 0x66, 0x78, 0x88, 0x88, 0x88, 0x77, 0x77, //1932
			0x65, 0x44, 0x66, 0x55, 0x66, 0x67, 0x78, 0x88, 0x88, 0x99, 0x88, 0x77, //1933
			0x66, 0x44, 0x66, 0x56, 0x67, 0x67, 0x88, 0x89, 0x89, 0x99, 0x88, 0x87, //1934
			0x66, 0x54, 0x66, 0x66, 0x67, 0x67, 0x89, 0x89, 0x89, 0x99, 0x88, 0x88, //1935
			0x66, 0x55, 0x66, 0x55, 0x66, 0x66, 0x78, 0x88, 0x88, 0x88, 0x77, 0x77, //1936
			0x65, 0x44, 0x66, 0x55, 0x66, 0x67, 0x78, 0x88, 0x88, 0x99, 0x88, 0x77, //1937
			0x66, 0x44, 0x66, 0x56, 0x67, 0x67, 0x88, 0x89, 0x89, 0x99, 0x88, 0x87, //1938
			0x66, 0x54, 0x66, 0x66, 0x67, 0x67, 0x89, 0x89, 0x89, 0x99, 0x88, 0x88, //1939
			0x66, 0x55, 0x66, 0x55, 0x66, 0x66, 0x78, 0x88, 0x88, 0x88, 0x77, 0x77, //1940
			0x65, 0x44, 0x66, 0x55, 0x66, 0x67, 0x78, 0x88, 0x88, 0x99, 0x88, 0x77, //1941
			0x66, 0x44, 0x66, 0x56, 0x67, 0x67, 0x88, 0x89, 0x89, 0x99, 0x88, 0x87, //1942
			0x66, 0x54, 0x66, 0x66, 0x67, 0x67, 0x89, 0x89, 0x89, 0x99, 0x88, 0x88, //1943
			0x66, 0x55, 0x66, 0x55, 0x56, 0x66, 0x78, 0x88, 0x88, 0x88, 0x77, 0x77, //1944
			0x65, 0x44, 0x66, 0x55, 0x66, 0x67, 0x78, 0x88, 0x88, 0x89, 0x87, 0x77, //1945
			0x65, 0x44, 0x66, 0x56, 0x67, 0x67, 0x88, 0x89, 0x88, 0x99, 0x88, 0x87, //1946
			0x66, 0x44, 0x66, 0x56, 0x67, 0x67, 0x89, 0x89, 0x89, 0x99, 0x88, 0x88, //1947
			0x66, 0x55, 0x56, 0x55, 0x56, 0x66, 0x78, 0x78, 0x88, 0x88, 0x77, 0x77, //1948
			0x55, 0x44, 0x66, 0x55, 0x66, 0x67, 0x78, 0x88, 0x88, 0x89, 0x87, 0x77, //1949
			0x65, 0x44, 0x66, 0x55, 0x66, 0x67, 0x88, 0x89, 0x88, 0x99, 0x88, 0x87, //1950
			0x66, 0x44, 0x66, 0x56, 0x67, 0x67, 0x89, 0x89, 0x89, 0x99, 0x88, 0x88, //1951
			0x66, 0x55, 0x56, 0x55, 0x56, 0x66, 0x78, 0x78, 0x88, 0x88, 0x77, 0x77, //1952
			0x55, 0x44, 0x66, 0x55, 0x66, 0x67, 0x78, 0x88, 0x88, 0x89, 0x87, 0x77, //1953
			0x65, 0x44, 0x66, 0x55, 0x66, 0x67, 0x88, 0x89, 0x88, 0x99, 0x88, 0x77, //1954
			0x66, 0x44, 0x66, 0x56, 0x67, 0x67, 0x88, 0x89, 0x89, 0x99, 0x88, 0x87, //1955
			0x66, 0x55, 0x55, 0x55, 0x56, 0x66, 0x78, 0x78, 0x88, 0x88, 0x77, 0x77, //1956
			0x55, 0x44, 0x66, 0x55, 0x66, 0x67, 0x78, 0x88, 0x88, 0x89, 0x87, 0x77, //1957
			0x65, 0x44, 0x66, 0x55, 0x66, 0x67, 0x78, 0x88, 0x88, 0x99, 0x88, 0x77, //1958
			0x66, 0x44, 0x66, 0x56, 0x67, 0x67, 0x88, 0x89, 0x89, 0x99, 0x88, 0x87, //1959
			0x66, 0x54, 0x55, 0x55, 0x56, 0x66, 0x78, 0x78, 0x78, 0x88, 0x77, 0x77, //1960
			0x55, 0x44, 0x66, 0x55, 0x66, 0x66, 0x78, 0x88, 0x88, 0x88, 0x77, 0x77, //1961
			0x65, 0x44, 0x66, 0x55, 0x66, 0x67, 0x78, 0x88, 0x88, 0x99, 0x88, 0x77, //1962
			0x66, 0x44, 0x66, 0x56, 0x67, 0x67, 0x88, 0x89, 0x89, 0x99, 0x88, 0x87, //1963
			0x66, 0x54, 0x55, 0x55, 0x56, 0x66, 0x78, 0x78, 0x78, 0x88, 0x77, 0x77, //1964
			0x55, 0x44, 0x66, 0x55, 0x66, 0x66, 0x78, 0x88, 0x88, 0x88, 0x77, 0x77, //1965
			0x65, 0x44, 0x66, 0x55, 0x66, 0x67, 0x78, 0x88, 0x88, 0x99, 0x88, 0x77, //1966
			0x66, 0x44, 0x66, 0x56, 0x67, 0x67, 0x88, 0x89, 0x89, 0x99, 0x88, 0x87, //1967
			0x66, 0x54, 0x55, 0x55, 0x56, 0x56, 0x78, 0x78, 0x78, 0x88, 0x77, 0x77, //1968
			0x55, 0x44, 0x66, 0x55, 0x66, 0x66, 0x78, 0x88, 0x88, 0x88, 0x77, 0x77, //1969
			0x65, 0x44, 0x66, 0x55, 0x66, 0x67, 0x78, 0x88, 0x88, 0x99, 0x88, 0x77, //1970
			0x66, 0x44, 0x66, 0x56, 0x67, 0x67, 0x88, 0x89, 0x89, 0x99, 0x88, 0x87, //1971
			0x66, 0x54, 0x55, 0x55, 0x56, 0x56, 0x78, 0x78, 0x78, 0x88, 0x77, 0x77, //1972
			0x55, 0x44, 0x66, 0x55, 0x56, 0x66, 0x78, 0x88, 0x88, 0x88, 0x77, 0x77, //1973
			0x65, 0x44, 0x66, 0x55, 0x66, 0x67, 0x78, 0x88, 0x88, 0x99, 0x88, 0x77, //1974
			0x66, 0x44, 0x66, 0x56, 0x67, 0x67, 0x88, 0x89, 0x88, 0x99, 0x88, 0x87, //1975
			0x66, 0x54, 0x55, 0x45, 0x56, 0x56, 0x78, 0x78, 0x78, 0x88, 0x77, 0x77, //1976
			0x55, 0x44, 0x66, 0x55, 0x56, 0x66, 0x78, 0x78, 0x88, 0x88, 0x77, 0x77, //1977
			0x65, 0x44, 0x66, 0x55, 0x66, 0x67, 0x78, 0x88, 0x88, 0x89, 0x88, 0x77, //1978
			0x66, 0x44, 0x66, 0x56, 0x66, 0x67, 0x88, 0x89, 0x88, 0x99, 0x88, 0x87, //1979
			0x66, 0x54, 0x55, 0x45, 0x56, 0x56, 0x78, 0x78, 0x78, 0x88, 0x77, 0x77, //1980
			0x55, 0x44, 0x66, 0x55, 0x56, 0x66, 0x78, 0x78, 0x88, 0x88, 0x77, 0x77, //1981
			0x65, 0x44, 0x66, 0x55, 0x66, 0x67, 0x78, 0x88, 0x88, 0x89, 0x87, 0x77, //1982
			0x65, 0x44, 0x66, 0x55, 0x66, 0x67, 0x88, 0x89, 0x88, 0x99, 0x88, 0x87, //1983
			0x66, 0x44, 0x55, 0x45, 0x56, 0x56, 0x77, 0x78, 0x78, 0x88, 0x77, 0x77, //1984
			0x55, 0x44, 0x56, 0x55, 0x56, 0x66, 0x78, 0x78, 0x88, 0x88, 0x77, 0x77, //1985
			0x55, 0x44, 0x66, 0x55, 0x66, 0x67, 0x78, 0x88, 0x88, 0x89, 0x87, 0x77, //1986
			0x65, 0x44, 0x66, 0x55, 0x66, 0x67, 0x78, 0x89, 0x88, 0x99, 0x88, 0x77, //1987
			0x66, 0x44, 0x55, 0x45, 0x56, 0x56, 0x77, 0x78, 0x78, 0x88, 0x77, 0x76, //1988
			0x55, 0x44, 0x55, 0x55, 0x56, 0x66, 0x78, 0x78, 0x78, 0x88, 0x77, 0x77, //1989
			0x55, 0x44, 0x66, 0x55, 0x66, 0x66, 0x78, 0x88, 0x88, 0x89, 0x87, 0x77, //1990
			0x65, 0x44, 0x66, 0x55, 0x66, 0x67, 0x78, 0x88, 0x88, 0x99, 0x88, 0x77, //1991
			0x66, 0x44, 0x55, 0x45, 0x56, 0x56, 0x77, 0x78, 0x78, 0x88, 0x77, 0x76, //1992
			0x55, 0x43, 0x55, 0x55, 0x56, 0x66, 0x78, 0x78, 0x78, 0x88, 0x77, 0x77, //1993
			0x55, 0x44, 0x66, 0x55, 0x66, 0x66, 0x78, 0x88, 0x88, 0x88, 0x77, 0x77, //1994
			0x65, 0x44, 0x66, 0x55, 0x66, 0x67, 0x78, 0x88, 0x88, 0x99, 0x88, 0x77, //1995
			0x66, 0x44, 0x55, 0x45, 0x56, 0x56, 0x77, 0x78, 0x78, 0x88, 0x77, 0x76, //1996
			0x55, 0x43, 0x55, 0x55, 0x56, 0x56, 0x78, 0x78, 0x78, 0x88, 0x77, 0x77, //1997
			0x55, 0x44, 0x66, 0x55, 0x66, 0x66, 0x78, 0x88, 0x88, 0x88, 0x77, 0x77, //1998
			0x65, 0x44, 0x66, 0x55, 0x66, 0x67, 0x78, 0x88, 0x88, 0x99, 0x88, 0x77, //1999
			0x66, 0x44, 0x55, 0x45, 0x56, 0x56, 0x77, 0x78, 0x78, 0x88, 0x77, 0x76, //2000
			0x55, 0x43, 0x55, 0x55, 0x56, 0x56, 0x78, 0x78, 0x78, 0x88, 0x77, 0x77, //2001
			0x55, 0x44, 0x66, 0x55, 0x66, 0x66, 0x78, 0x88, 0x88, 0x88, 0x77, 0x77, //2002
			0x65, 0x44, 0x66, 0x55, 0x66, 0x67, 0x78, 0x88, 0x88, 0x99, 0x88, 0x77, //2003
			0x66, 0x44, 0x55, 0x45, 0x56, 0x56, 0x77, 0x78, 0x78, 0x88, 0x77, 0x76, //2004
			0x55, 0x43, 0x55, 0x55, 0x56, 0x56, 0x78, 0x78, 0x78, 0x88, 0x77, 0x77, //2005
			0x55, 0x44, 0x66, 0x55, 0x56, 0x66, 0x78, 0x78, 0x88, 0x88, 0x77, 0x77, //2006
			0x65, 0x44, 0x66, 0x55, 0x66, 0x67, 0x78, 0x88, 0x88, 0x99, 0x88, 0x77, //2007
			0x66, 0x44, 0x55, 0x45, 0x56, 0x56, 0x77, 0x78, 0x77, 0x88, 0x77, 0x76, //2008
			0x55, 0x43, 0x55, 0x45, 0x56, 0x56, 0x78, 0x78, 0x78, 0x88, 0x77, 0x77, //2009
			0x55, 0x44, 0x66, 0x55, 0x56, 0x66, 0x78, 0x78, 0x88, 0x88, 0x77, 0x77, //2010
			0x65, 0x44, 0x66, 0x55, 0x66, 0x67, 0x78, 0x88, 0x88, 0x89, 0x88, 0x77, //2011
			0x66, 0x44, 0x55, 0x45, 0x55, 0x56, 0x77, 0x78, 0x77, 0x88, 0x77, 0x76, //2012
			0x55, 0x43, 0x55, 0x45, 0x56, 0x56, 0x77, 0x78, 0x78, 0x88, 0x77, 0x77, //2013
			0x55, 0x44, 0x66, 0x55, 0x56, 0x66, 0x78, 0x78, 0x88, 0x88, 0x77, 0x77, //2014
			0x65, 0x44, 0x66, 0x55, 0x66, 0x67, 0x78, 0x88, 0x88, 0x89, 0x87, 0x77, //2015
			0x65, 0x44, 0x55, 0x44, 0x55, 0x56, 0x77, 0x78, 0x77, 0x88, 0x77, 0x76, //2016
			0x55, 0x33, 0x55, 0x45, 0x56, 0x56, 0x77, 0x78, 0x78, 0x88, 0x77, 0x77, //2017
			0x55, 0x44, 0x56, 0x55, 0x56, 0x66, 0x78, 0x78, 0x88, 0x88, 0x77, 0x77, //2018
			0x55, 0x44, 0x66, 0x55, 0x66, 0x66, 0x78, 0x88, 0x88, 0x89, 0x87, 0x77, //2019
			0x65, 0x44, 0x55, 0x44, 0x55, 0x56, 0x67, 0x77, 0x77, 0x88, 0x77, 0x76, //2020
			0x55, 0x33, 0x55, 0x45, 0x56, 0x56, 0x77, 0x78, 0x78, 0x88, 0x77, 0x76, //2021
			0x55, 0x44, 0x55, 0x55, 0x56, 0x66, 0x78, 0x78, 0x78, 0x88, 0x77, 0x77, //2022
			0x55, 0x44, 0x66, 0x55, 0x66, 0x66, 0x78, 0x88, 0x88, 0x89, 0x87, 0x77, //2023
			0x65, 0x44, 0x55, 0x44, 0x55, 0x56, 0x67, 0x77, 0x77, 0x88, 0x77, 0x66, //2024
			0x55, 0x33, 0x55, 0x45, 0x56, 0x56, 0x77, 0x78, 0x78, 0x88, 0x77, 0x76, //2025
			0x55, 0x43, 0x55, 0x55, 0x56, 0x56, 0x78, 0x78, 0x78, 0x88, 0x77, 0x77, //2026
			0x55, 0x44, 0x66, 0x55, 0x66, 0x66, 0x78, 0x88, 0x88, 0x88, 0x77, 0x77, //2027
			0x65, 0x44, 0x55, 0x44, 0x55, 0x56, 0x67, 0x77, 0x77, 0x88, 0x77, 0x66, //2028
			0x55, 0x33, 0x55, 0x45, 0x56, 0x56, 0x77, 0x78, 0x78, 0x88, 0x77, 0x76, //2029
			0x55, 0x43, 0x55, 0x55, 0x56, 0x56, 0x78, 0x78, 0x78, 0x88, 0x77, 0x77, //2030
			0x55, 0x44, 0x66, 0x55, 0x66, 0x66, 0x78, 0x88, 0x88, 0x88, 0x77, 0x77, //2031
			0x65, 0x44, 0x55, 0x44, 0x55, 0x56, 0x67, 0x77, 0x77, 0x88, 0x77, 0x66, //2032
			0x55, 0x33, 0x55, 0x45, 0x56, 0x56, 0x77, 0x78, 0x78, 0x88, 0x77, 0x76, //2033
			0x55, 0x43, 0x55, 0x55, 0x56, 0x56, 0x78, 0x78, 0x78, 0x88, 0x77, 0x77, //2034
			0x55, 0x44, 0x66, 0x55, 0x56, 0x66, 0x78, 0x78, 0x88, 0x88, 0x77, 0x77, //2035
			0x65, 0x44, 0x55, 0x44, 0x55, 0x56, 0x67, 0x77, 0x77, 0x88, 0x77, 0x66, //2036
			0x55, 0x33, 0x55, 0x45, 0x56, 0x56, 0x77, 0x78, 0x78, 0x88, 0x77, 0x76, //2037
			0x55, 0x43, 0x55, 0x55, 0x56, 0x56, 0x78, 0x78, 0x78, 0x88, 0x77, 0x77, //2038
			0x55, 0x44, 0x66, 0x55, 0x56, 0x66, 0x78, 0x78, 0x88, 0x88, 0x77, 0x77, //2039
			0x65, 0x44, 0x55, 0x44, 0x55, 0x56, 0x67, 0x77, 0x77, 0x88, 0x77, 0x66, //2040
			0x55, 0x33, 0x55, 0x45, 0x55, 0x56, 0x77, 0x78, 0x77, 0x88, 0x77, 0x76, //2041
			0x55, 0x43, 0x55, 0x45, 0x56, 0x56, 0x78, 0x78, 0x78, 0x88, 0x77, 0x77, //2042
			0x55, 0x44, 0x66, 0x55, 0x56, 0x66, 0x78, 0x78, 0x88, 0x88, 0x77, 0x77, //2043
			0x65, 0x44, 0x55, 0x44, 0x55, 0x56, 0x67, 0x77, 0x77, 0x78, 0x77, 0x66, //2044
			0x55, 0x33, 0x55, 0x44, 0x55, 0x56, 0x77, 0x78, 0x77, 0x88, 0x77, 0x76, //2045
			0x55, 0x43, 0x55, 0x45, 0x56, 0x56, 0x77, 0x78, 0x78, 0x88, 0x77, 0x77, //2046
			0x55, 0x44, 0x66, 0x55, 0x56, 0x66, 0x78, 0x78, 0x88, 0x88, 0x77, 0x77, //2047
			0x65, 0x44, 0x55, 0x44, 0x55, 0x55, 0x67, 0x77, 0x77, 0x78, 0x76, 0x66, //2048
			0x54, 0x33, 0x55, 0x44, 0x55, 0x56, 0x67, 0x77, 0x77, 0x88, 0x77, 0x76, //2049
			0x55, 0x33, 0x55, 0x45, 0x56, 0x56, 0x77, 0x78, 0x78, 0x88, 0x77, 0x77, //2050
			0x55, 0x44, 0x55, 0x55, 0x56, 0x66, 0x78, 0x78, 0x78, 0x88, 0x77, 0x77, //2051
			0x55, 0x44, 0x55, 0x44, 0x55, 0x55, 0x67, 0x77, 0x77, 0x78, 0x76, 0x66, //2052
			0x54, 0x33, 0x55, 0x44, 0x55, 0x56, 0x67, 0x77, 0x77, 0x88, 0x77, 0x76, //2053
			0x55, 0x33, 0x55, 0x45, 0x56, 0x56, 0x77, 0x78, 0x78, 0x88, 0x77, 0x77, //2054
			0x55, 0x44, 0x55, 0x55, 0x56, 0x56, 0x78, 0x78, 0x78, 0x88, 0x77, 0x77, //2055
			0x55, 0x44, 0x55, 0x44, 0x55, 0x55, 0x67, 0x77, 0x77, 0x78, 0x76, 0x66, //2056
			0x54, 0x33, 0x55, 0x44, 0x55, 0x56, 0x67, 0x77, 0x77, 0x88, 0x77, 0x66, //2057
			0x55, 0x33, 0x55, 0x45, 0x56, 0x56, 0x77, 0x78, 0x78, 0x88, 0x77, 0x76, //2058
			0x55, 0x44, 0x55, 0x55, 0x56, 0x56, 0x78, 0x78, 0x78, 0x88, 0x77, 0x77, //2059
			0x55, 0x44, 0x55, 0x44, 0x55, 0x55, 0x67, 0x77, 0x77, 0x77, 0x66, 0x66, //2060
			0x54, 0x33, 0x55, 0x44, 0x55, 0x56, 0x67, 0x77, 0x77, 0x88, 0x77, 0x66, //2061
			0x55, 0x33, 0x55, 0x45, 0x56, 0x56, 0x77, 0x78, 0x78, 0x88, 0x77, 0x76, //2062
			0x55, 0x43, 0x55, 0x55, 0x56, 0x56, 0x78, 0x78, 0x78, 0x88, 0x77, 0x77, //2063
			0x55, 0x44, 0x55, 0x44, 0x55, 0x55, 0x67, 0x77, 0x77, 0x77, 0x66, 0x66, //2064
			0x54, 0x33, 0x55, 0x44, 0x55, 0x56, 0x67, 0x77, 0x77, 0x88, 0x77, 0x66, //2065
			0x55, 0x33, 0x55, 0x45, 0x56, 0x56, 0x77, 0x78, 0x78, 0x88, 0x77, 0x76, //2066
			0x55, 0x43, 0x55, 0x55, 0x56, 0x56, 0x78, 0x78, 0x78, 0x88, 0x77, 0x77, //2067
			0x55, 0x44, 0x55, 0x44, 0x45, 0x55, 0x67, 0x67, 0x77, 0x77, 0x66, 0x66, //2068
			0x54, 0x33, 0x55, 0x44, 0x55, 0x56, 0x67, 0x77, 0x77, 0x88, 0x77, 0x66, //2069
			0x55, 0x33, 0x55, 0x45, 0x55, 0x56, 0x77, 0x78, 0x77, 0x88, 0x77, 0x76, //2070
			0x55, 0x43, 0x55, 0x55, 0x56, 0x56, 0x78, 0x78, 0x78, 0x88, 0x77, 0x77, //2071
			0x55, 0x44, 0x55, 0x44, 0x45, 0x55, 0x67, 0x67, 0x77, 0x77, 0x66, 0x66, //2072
			0x54, 0x33, 0x55, 0x44, 0x55, 0x56, 0x67, 0x77, 0x77, 0x78, 0x77, 0x66, //2073
			0x55, 0x33, 0x55, 0x45, 0x55, 0x56, 0x77, 0x78, 0x77, 0x88, 0x77, 0x76, //2074
			0x55, 0x43, 0x55, 0x45, 0x56, 0x56, 0x77, 0x78, 0x78, 0x88, 0x77, 0x77, //2075
			0x55, 0x44, 0x55, 0x44, 0x45, 0x55, 0x67, 0x67, 0x77, 0x77, 0x66, 0x66, //2076
			0x54, 0x33, 0x55, 0x44, 0x55, 0x56, 0x67, 0x77, 0x77, 0x78, 0x77, 0x66, //2077
			0x55, 0x33, 0x55, 0x44, 0x55, 0x56, 0x67, 0x78, 0x77, 0x88, 0x77, 0x76, //2078
			0x55, 0x43, 0x55, 0x45, 0x56, 0x56, 0x77, 0x78, 0x78, 0x88, 0x77, 0x77, //2079
			0x55, 0x44, 0x55, 0x44, 0x45, 0x55, 0x67, 0x67, 0x77, 0x77, 0x66, 0x66, //2080
			0x54, 0x33, 0x55, 0x44, 0x55, 0x55, 0x67, 0x77, 0x77, 0x78, 0x76, 0x66, //2081
			0x55, 0x33, 0x55, 0x44, 0x55, 0x56, 0x67, 0x77, 0x77, 0x88, 0x77, 0x76, //2082
			0x55, 0x33, 0x55, 0x45, 0x56, 0x56, 0x77, 0x78, 0x78, 0x88, 0x77, 0x77, //2083
			0x55, 0x44, 0x44, 0x44, 0x45, 0x55, 0x67, 0x67, 0x67, 0x77, 0x66, 0x66, //2084
			0x44, 0x33, 0x55, 0x44, 0x55, 0x55, 0x67, 0x77, 0x77, 0x78, 0x76, 0x66, //2085
			0x54, 0x33, 0x55, 0x44, 0x55, 0x56, 0x67, 0x77, 0x77, 0x88, 0x77, 0x76, //2086
			0x55, 0x33, 0x55, 0x45, 0x56, 0x56, 0x77, 0x78, 0x78, 0x88, 0x77, 0x77, //2087
			0x55, 0x44, 0x44, 0x44, 0x45, 0x45, 0x67, 0x67, 0x67, 0x77, 0x66, 0x66, //2088
			0x44, 0x33, 0x55, 0x44, 0x55, 0x55, 0x67, 0x77, 0x77, 0x78, 0x76, 0x66, //2089
			0x54, 0x33, 0x55, 0x44, 0x55, 0x56, 0x67, 0x77, 0x77, 0x88, 0x77, 0x66, //2090
			0x55, 0x33, 0x55, 0x45, 0x56, 0x56, 0x77, 0x78, 0x78, 0x88, 0x77, 0x76, //2091
			0x55, 0x44, 0x44, 0x44, 0x45, 0x45, 0x67, 0x67, 0x67, 0x77, 0x66, 0x66, //2092
			0x44, 0x33, 0x55, 0x44, 0x55, 0x55, 0x67, 0x77, 0x77, 0x77, 0x66, 0x66, //2093
			0x54, 0x33, 0x55, 0x44, 0x55, 0x56, 0x67, 0x77, 0x77, 0x88, 0x77, 0x66, //2094
			0x55, 0x33, 0x55, 0x45, 0x56, 0x56, 0x77, 0x78, 0x78, 0x88, 0x77, 0x76, //2095
			0x55, 0x43, 0x44, 0x44, 0x45, 0x45, 0x67, 0x67, 0x67, 0x77, 0x66, 0x66, //2096
			0x44, 0x33, 0x55, 0x44, 0x55, 0x55, 0x67, 0x67, 0x77, 0x77, 0x66, 0x66, //2097
			0x54, 0x33, 0x55, 0x44, 0x55, 0x56, 0x67, 0x77, 0x77, 0x88, 0x77, 0x66, //2098
			0x55, 0x33, 0x55, 0x45, 0x56, 0x56, 0x77, 0x78, 0x78, 0x88, 0x77, 0x76, //2099
			0x55, 0x43, 0x55, 0x55, 0x56, 0x56, 0x78, 0x78, 0x78, 0x88, 0x77, 0x77  //2100
		);
		  
		return dechex($SolarTerms[$index]);
	}
}


class Lunar {
	public $MIN_YEAR = 1891;
	public $MAX_YEAR = 2100;
	public $lunarInfo = array (array (0, 2, 9, 21936 ), array (6, 1, 30, 9656 ), array (0, 2, 17, 9584 ), array (0, 2, 6, 21168 ), array (5, 1, 26, 43344 ), array (0, 2, 13, 59728 ), array (0, 2, 2, 27296 ), array (3, 1, 22, 44368 ), array (0, 2, 10, 43856 ), array (8, 1, 30, 19304 ), array (0, 2, 19, 19168 ), array (0, 2, 8, 42352 ), array (5, 1, 29, 21096 ), array (0, 2, 16, 53856 ), array (0, 2, 4, 55632 ), array (4, 1, 25, 27304 ), array (0, 2, 13, 22176 ), array (0, 2, 2, 39632 ), array (2, 1, 22, 19176 ), array (0, 2, 10, 19168 ), array (6, 1, 30, 42200 ), array (0, 2, 18, 42192 ), array (0, 2, 6, 53840 ), array (5, 1, 26, 54568 ), array (0, 2, 14, 46400 ), array (0, 2, 3, 54944 ), array (2, 1, 23, 38608 ), array (0, 2, 11, 38320 ), array (7, 2, 1, 18872 ), array (0, 2, 20, 18800 ), array (0, 2, 8, 42160 ), array (5, 1, 28, 45656 ), array (0, 2, 16, 27216 ), array (0, 2, 5, 27968 ), array (4, 1, 24, 44456 ), array (0, 2, 13, 11104 ), array (0, 2, 2, 38256 ), array (2, 1, 23, 18808 ), array (0, 2, 10, 18800 ), array (6, 1, 30, 25776 ), array (0, 2, 17, 54432 ), array (0, 2, 6, 59984 ), array (5, 1, 26, 27976 ), array (0, 2, 14, 23248 ), array (0, 2, 4, 11104 ), array (3, 1, 24, 37744 ), array (0, 2, 11, 37600 ), array (7, 1, 31, 51560 ), array (0, 2, 19, 51536 ), array (0, 2, 8, 54432 ), array (6, 1, 27, 55888 ), array (0, 2, 15, 46416 ), array (0, 2, 5, 22176 ), array (4, 1, 25, 43736 ), array (0, 2, 13, 9680 ), array (0, 2, 2, 37584 ), array (2, 1, 22, 51544 ), array (0, 2, 10, 43344 ), array (7, 1, 29, 46248 ), array (0, 2, 17, 27808 ), array (0, 2, 6, 46416 ), array (5, 1, 27, 21928 ), array (0, 2, 14, 19872 ), array (0, 2, 3, 42416 ), array (3, 1, 24, 21176 ), array (0, 2, 12, 21168 ), array (8, 1, 31, 43344 ), array (0, 2, 18, 59728 ), array (0, 2, 8, 27296 ), array (6, 1, 28, 44368 ), array (0, 2, 15, 43856 ), array (0, 2, 5, 19296 ), array (4, 1, 25, 42352 ), array (0, 2, 13, 42352 ), array (0, 2, 2, 21088 ), array (3, 1, 21, 59696 ), array (0, 2, 9, 55632 ), array (7, 1, 30, 23208 ), array (0, 2, 17, 22176 ), array (0, 2, 6, 38608 ), array (5, 1, 27, 19176 ), array (0, 2, 15, 19152 ), array (0, 2, 3, 42192 ), array (4, 1, 23, 53864 ), array (0, 2, 11, 53840 ), array (8, 1, 31, 54568 ), array (0, 2, 18, 46400 ), array (0, 2, 7, 46752 ), array (6, 1, 28, 38608 ), array (0, 2, 16, 38320 ), array (0, 2, 5, 18864 ), array (4, 1, 25, 42168 ), array (0, 2, 13, 42160 ), array (10, 2, 2, 45656 ), array (0, 2, 20, 27216 ), array (0, 2, 9, 27968 ), array (6, 1, 29, 44448 ), array (0, 2, 17, 43872 ), array (0, 2, 6, 38256 ), array (5, 1, 27, 18808 ), array (0, 2, 15, 18800 ), array (0, 2, 4, 25776 ), array (3, 1, 23, 27216 ), array (0, 2, 10, 59984 ), array (8, 1, 31, 27432 ), array (0, 2, 19, 23232 ), array (0, 2, 7, 43872 ), array (5, 1, 28, 37736 ), array (0, 2, 16, 37600 ), array (0, 2, 5, 51552 ), array (4, 1, 24, 54440 ), array (0, 2, 12, 54432 ), array (0, 2, 1, 55888 ), array (2, 1, 22, 23208 ), array (0, 2, 9, 22176 ), array (7, 1, 29, 43736 ), array (0, 2, 18, 9680 ), array (0, 2, 7, 37584 ), array (5, 1, 26, 51544 ), array (0, 2, 14, 43344 ), array (0, 2, 3, 46240 ), array (4, 1, 23, 46416 ), array (0, 2, 10, 44368 ), array (9, 1, 31, 21928 ), array (0, 2, 19, 19360 ), array (0, 2, 8, 42416 ), array (6, 1, 28, 21176 ), array (0, 2, 16, 21168 ), array (0, 2, 5, 43312 ), array (4, 1, 25, 29864 ), array (0, 2, 12, 27296 ), array (0, 2, 1, 44368 ), array (2, 1, 22, 19880 ), array (0, 2, 10, 19296 ), array (6, 1, 29, 42352 ), array (0, 2, 17, 42208 ), array (0, 2, 6, 53856 ), array (5, 1, 26, 59696 ), array (0, 2, 13, 54576 ), array (0, 2, 3, 23200 ), array (3, 1, 23, 27472 ), array (0, 2, 11, 38608 ), array (11, 1, 31, 19176 ), array (0, 2, 19, 19152 ), array (0, 2, 8, 42192 ), array (6, 1, 28, 53848 ), array (0, 2, 15, 53840 ), array (0, 2, 4, 54560 ), array (5, 1, 24, 55968 ), array (0, 2, 12, 46496 ), array (0, 2, 1, 22224 ), array (2, 1, 22, 19160 ), array (0, 2, 10, 18864 ), array (7, 1, 30, 42168 ), array (0, 2, 17, 42160 ), array (0, 2, 6, 43600 ), array (5, 1, 26, 46376 ), array (0, 2, 14, 27936 ), array (0, 2, 2, 44448 ), array (3, 1, 23, 21936 ), array (0, 2, 11, 37744 ), array (8, 2, 1, 18808 ), array (0, 2, 19, 18800 ), array (0, 2, 8, 25776 ), array (6, 1, 28, 27216 ), array (0, 2, 15, 59984 ), array (0, 2, 4, 27424 ), array (4, 1, 24, 43872 ), array (0, 2, 12, 43744 ), array (0, 2, 2, 37600 ), array (3, 1, 21, 51568 ), array (0, 2, 9, 51552 ), array (7, 1, 29, 54440 ), array (0, 2, 17, 54432 ), array (0, 2, 5, 55888 ), array (5, 1, 26, 23208 ), array (0, 2, 14, 22176 ), array (0, 2, 3, 42704 ), array (4, 1, 23, 21224 ), array (0, 2, 11, 21200 ), array (8, 1, 31, 43352 ), array (0, 2, 19, 43344 ), array (0, 2, 7, 46240 ), array (6, 1, 27, 46416 ), array (0, 2, 15, 44368 ), array (0, 2, 5, 21920 ), array (4, 1, 24, 42448 ), array (0, 2, 12, 42416 ), array (0, 2, 2, 21168 ), array (3, 1, 22, 43320 ), array (0, 2, 9, 26928 ), array (7, 1, 29, 29336 ), array (0, 2, 17, 27296 ), array (0, 2, 6, 44368 ), array (5, 1, 26, 19880 ), array (0, 2, 14, 19296 ), array (0, 2, 3, 42352 ), array (4, 1, 24, 21104 ), array (0, 2, 10, 53856 ), array (8, 1, 30, 59696 ), array (0, 2, 18, 54560 ), array (0, 2, 7, 55968 ), array (6, 1, 27, 27472 ), array (0, 2, 15, 22224 ), array (0, 2, 5, 19168 ), array (4, 1, 25, 42216 ), array (0, 2, 12, 42192 ), array (0, 2, 1, 53584 ), array (2, 1, 21, 55592 ), array (0, 2, 9, 54560 ) );
    
	/**
     * 实例
     * @var Lunar
     */
    protected static $instance;

    /**
     * 单例模式
     * @return Contact_Model
     */
    public static function &instance ()
    {
        if (! isset(self::$instance)) {
            // Create a new instance
            self::$instance = new Lunar();
        }
        return self::$instance;
    }
    
	/**
	 * 将阳历转换为阴历
	 * @param year 公历-年
	 * @param month 公历-月
	 * @param date 公历-日
	 */
	public function convertSolarToLunar($year, $month, $date) {
		//debugger;
		$yearData = $this->lunarInfo [$year - $this->MIN_YEAR];
		if ($year == $this->MIN_YEAR && $month <= 2 && $date <= 9)
		{
			#return array (1891, '正月', '初一', '辛卯', 1, 1, '兔' );
			return array (1891, '1', '1', '辛卯', 1, 1, '兔' );
		}
		return $this->getLunarByBetween( $year, $this->getDaysBetweenSolar ( $year, $month, $date, $yearData [1], $yearData [2] ) );
	}

	/**
	 * 将阴历转换为阳历
	 * @param year 阴历-年
	 * @param month 阴历-月 (闰月处理：例如如果当年闰五月，那么第二个五月就传六月，相当于阴历有13个月，只是有的时候第13个月的天数为0)
	 * @param date 阴历-日
	 * @param isleap 是否是闰月
	 */
	public function convertLunarToSolar($year, $month, $date, $isleap = false) {
		if ($year < $this->MIN_YEAR || $year > $this->MAX_YEAR) {
			return array("date"=>false, "msg"=>"该阴历时期超出换算范围");
		}

		$months = $this->getLunarMonths ($year);
		
		$leapmonth =  $this->getLeapMonth($year);

		if ($leapmonth != 0 && ($month > $leapmonth || ($isleap && $month == $leapmonth))) {
			++$month;
		}

		if ($date > $months[$month-1]) {
			return array("date"=>false, "msg"=>"不存在该天");
		}	
	
		$yearData = $this->lunarInfo [$year - $this->MIN_YEAR];
		$between = $this->getDaysBetweenLunar ( $year, $month, $date );
		$res = mktime ( 0, 0, 0, $yearData [1], $yearData [2], $year );

		$res = date ( 'Y-m-d', $res + $between * 24 * 60 * 60 );

		return array("date"=>explode ( '-', $res ));
	}

	/**
	 * 判断是否是闰年
	 * @param year
	 */
	public function isLeapYear($year) {
		return (($year % 4 == 0 && $year % 100 != 0) || ($year % 400 == 0));
	}

	/**
	 * 获取干支纪年
	 * @param year
	 */
	public function getLunarYearName($year) {
		$sky = array ('庚', '辛', '壬', '癸', '甲', '乙', '丙', '丁', '戊', '己' );
		$earth = array ('申', '酉', '戌', '亥', '子', '丑', '寅', '卯', '辰', '巳', '午', '未' );

		$year = $year . '';
		return $sky [$year {3}] . $earth [$year % 12];
	}

	/**
	 * 根据阴历年获取生肖
	 * @param year 阴历年
	 */
	public function getYearZodiac($year) {
		$zodiac = array ('猴', '鸡', '狗', '猪', '鼠', '牛', '虎', '兔', '龙', '蛇', '马', '羊' );
		return $zodiac [$year % 12];
	}

	/**
	 * 获取阳历月份的天数
	 * @param year 阳历-年
	 * @param month 阳历-月
	 */
	public function getSolarMonthDays($year, $month) {
		$monthHash = array ('1' => 31, '2' => $this->isLeapYear ( $year ) ? 29 : 28, '3' => 31, '4' => 30, '5' => 31, '6' => 30, '7' => 31, '8' => 31, '9' => 30, '10' => 31, '11' => 30, '12' => 31 );
		return $monthHash ["$month"];
	}

	/**
	 * 获取阴历月份的天数
	 * @param year 阴历-年
	 * @param month 阴历-月，从一月开始
	 */
	public function getLunarMonthDays($year, $month) {
		$monthData = $this->getLunarMonths ( $year );
		return $monthData [$month - 1];
	}

	/**
	 * 获取阴历每月的天数的数组
	 * @param year
	 */
	public function getLunarMonths($year) {

		$yearData = $this->lunarInfo [$year - $this->MIN_YEAR];
		$leapMonth = $yearData [0];

		$bit = decbin ( $yearData [3] );
		for($i = 0; $i < strlen ( $bit ); $i ++) {
			$bitArray [$i] = substr ( $bit, $i, 1 );
		}

		for($k = 0, $klen = 16 - count ( $bitArray ); $k < $klen; $k ++) {
			array_unshift ( $bitArray, '0' );
		}

		$bitArray = array_slice ( $bitArray, 0, ($leapMonth == 0 ? 12 : 13) );
		for($i = 0; $i < count ( $bitArray ); $i ++) {
			$bitArray [$i] = $bitArray [$i] + 29;
		}

		return $bitArray;
	}

	/**
	 * 获取农历每年的天数
	 * @param year 农历年份
	 */
	public function getLunarYearDays($year) {
		$yearData = $this->lunarInfo [$year - $this->MIN_YEAR];
		$monthArray = $this->getLunarYearMonths ( $year );
		$len = count ( $monthArray );
		return ($monthArray [$len - 1] == 0 ? $monthArray [$len - 2] : $monthArray [$len - 1]);
	}

	public function getLunarYearMonths($year) {
		//debugger;
		$monthData = $this->getLunarMonths ( $year );
		$res = array ();
		$temp = 0;
		$yearData = $this->lunarInfo [$year - $this->MIN_YEAR];
		$len = ($yearData [0] == 0 ? 12 : 13);
		for($i = 0; $i < $len; $i ++) {
			$temp = 0;
			for($j = 0; $j <= $i; $j ++) {
				$temp += $monthData [$j];
			}
			array_push ( $res, $temp );
		}
		return $res;
	}

	/**
	 * 获取闰月
	 * @param year 阴历年份
	 */
	public function getLeapMonth($year) {
		$yearData = $this->lunarInfo [$year - $this->MIN_YEAR];
		return $yearData [0];
	}

	/**
	 * 计算阴历日期与正月初一相隔的天数
	 * @param year
	 * @param month
	 * @param date
	 */
	public function getDaysBetweenLunar($year, $month, $date) {
		$yearMonth = $this->getLunarMonths ( $year );

		$res = 0;
		for($i = 1; $i < $month; $i ++) {
			$res += $yearMonth [$i - 1];
		}
		$res += $date - 1;

		return $res;
	}

	/**
	 * 计算2个阳历日期之间的天数
	 * @param year 阳历年
	 * @param cmonth
	 * @param cdate
	 * @param dmonth 阴历正月对应的阳历月份
	 * @param ddate 阴历初一对应的阳历天数
	 */
	public function getDaysBetweenSolar($year, $cmonth, $cdate, $dmonth, $ddate) {

		$a = mktime ( 0, 0, 0, $cmonth, $cdate, $year );
		$b = mktime ( 0, 0, 0, $dmonth, $ddate, $year );

		return ceil ( ($a - $b) / 24 / 3600 );
	}

	/**
	 * 根据距离正月初一的天数计算阴历日期
	 * @param year 阳历年
	 * @param between 天数
	 */
	public function getLunarByBetween($year, $between) {
		//debugger;
		$lunarArray = array ();
		$yearMonth = array ();
		$t = 0;
		$e = 0;
		$leapMonth = 0;
		$m = '';

		if ($between == 0) {
			//array_push ( $lunarArray, $year, '正月', '初一' );
			//zmh 更改为数字
			array_push ( $lunarArray, $year, '1', '1' );
			$t = 1;
			$e = 1;
		} else {
			$year = $between > 0 ? $year : ($year - 1);
			$yearMonth = $this->getLunarYearMonths ( $year );
			$leapMonth = $this->getLeapMonth ( $year );
			$between = $between > 0 ? $between : ($this->getLunarYearDays ( $year ) + $between);

			for($i = 0; $i < 13; $i ++) {
				if ($between == $yearMonth [$i]) {
					$t = $i + 2;
					$e = 1;
					break;
				} else if ($between < $yearMonth [$i]) {
					$t = $i + 1;
					$e = $between - (empty ( $yearMonth [$i - 1] ) ? 0 : $yearMonth [$i - 1]) + 1;
					break;
				}
			}
			$m = ($leapMonth != 0 && $t == $leapMonth + 1) ? ('闰' . $this->getCapitalNum1 ( $t - 1, true )) : $this->getCapitalNum1 ( ($leapMonth != 0 && $leapMonth + 1 < $t ? ($t - 1) : $t), true );

			array_push ( $lunarArray, $year, $m, $this->getCapitalNum1 ( $e, false ) );
		}
		array_push ( $lunarArray, $this->getLunarYearName ( $year ) ); //天干地支
		array_push ( $lunarArray, $t, $e );
		array_push ( $lunarArray, $this->getYearZodiac ( $year ) ); //12生肖
		array_push ( $lunarArray, $leapMonth ); //闰几月
		return $lunarArray;
	}

	/**
	 * 获取数字的阴历叫法
	 * @param num 数字
	 * @param isMonth 是否是月份的数字
	 */
	public function getCapitalNum($num, $isMonth)
	{
		$isMonth = $isMonth || false;
		$dateHash = array ('0' => '', '1' => '一', '2' => '二', '3' => '三', '4' => '四', '5' => '五', '6' => '六', '7' => '七', '8' => '八', '9' => '九', '10' => '十 ' );
		$monthHash = array ('0' => '', '1' => '正月', '2' => '二月', '3' => '三月', '4' => '四月', '5' => '五月', '6' => '六月', '7' => '七月', '8' => '八月', '9' => '九月', '10' => '十月', '11' => '冬月', '12' => '腊月' );
		$res = '';

		if ($isMonth) {
			$res = $monthHash [$num];
		} else {
			if ($num <= 10) {
				$res = '初' . $dateHash [$num];
			} else if ($num > 10 && $num < 20) {
				$res = '十' . $dateHash [$num - 10];
			} else if ($num == 20) {
				$res = "二十";
			} else if ($num > 20 && $num < 30) {
				$res = "廿" . $dateHash [$num - 20];
			} else if ($num == 30) {
				$res = "三十";
			}
		}
		return $res;
	}
	
	
	public function getCapitalNum1($num, $isMonth) {
	$isMonth = $isMonth || false;
		$dateHash = array ('0' => '', '1' => '1', '2' => '2', '3' => '3', '4' => '4', '5' => '5', '6' => '6', '7' => '7', '8' => '8', '9' => '9', '10' => '10 ' );
		$monthHash = array ('0' => '', '1' => '1', '2' => '2', '3' => '3', '4' => '4', '5' => '5', '6' => '6', '7' => '7', '8' => '8', '9' => '9', '10' => '10', '11' => '11', '12' => '12' );
		$res = '';

		if ($isMonth) {
			$res = $monthHash [$num];
		} else {
			if ($num <= 10) {
				$res = $dateHash [$num];
			} else if ($num > 10 && $num < 20) {
				$res = "1".$dateHash [$num - 10];
			} else if ($num == 20) {
				$res = "20";
			} else if ($num > 20 && $num < 30) {
				$res = "2" . $dateHash [$num - 20];
			} else if ($num == 30) {
				$res = "30";
			}
		}
		return $res;
	}
}